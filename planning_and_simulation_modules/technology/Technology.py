# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PlanHeatDPM
                                 A QGIS plugin
 District Planninng Module
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-09-04
        git sha              : $Format:%H$
        copyright            : (C) 2018 by andbs
        email                : andbs@rina.org
 ***************************************************************************/
"""
from pandas import DataFrame, MultiIndex, Index

# Import PyQt5
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QTreeWidgetItem

# Import qgis main libraries
from qgis.core import *
from qgis.gui import *
from qgis.utils import *

class Technology(QTreeWidgetItem):
    """
    Technology tree item initialised with the name of the technology
    """

    def __init__(
            self,
            technology: str,
            source: str,
            inclinazione:float=10.0,
            temperature: int=100,
            eta_optical: float = 10.6,
            first_order_coeff: float=11.0,
            second_order_coeff: float = 11.0,
            p_max: float=100.0,
            p_min: float=100.0,
            power_to_heat_ratio: float=100.0,
            tech_min: float=100.5,
            ramp_up: int=100,
            fixed_cost: float=150,
            fuel_cost: float = 120,
            variable_cost: float=120,
            tes_size: float=100.0,
            SOC_min: float=100.0,
            tes_startEnd: float=100,
            tes_discharge: float=100,
            cop_absorption: float=100.0,
            el_sale : float=100.0,
            tes_loss : float = 1

    ):
        """
        Constructor of the techology tree item
        :param technology: name of the technology
        :param source: source of the technology
        :param capacity: capacity of the technology
        :param efficiency: efficiency of the technology
        :param tech_min: technical minimum
        :param ramp_up: ramp up speed
        :param ramp_down: ramp down speed
        :param fixed_cost: fixed cost
        :param variable_cost: variable cost
        """

        QTreeWidgetItem.__init__(
            self,
            [technology],
            type=QTreeWidgetItem.Type
        )

        # Initialise instance variables. Data are publicly accessed from
        # external modules for ease.

        self.source = source
        self.temperature = temperature
        self.eta_optical = eta_optical
        self.first_order_coeff=first_order_coeff
        self.second_order_coeff = second_order_coeff
        self.p_max = p_max
        self.p_min = p_min
        self.power_to_heat_ratio = power_to_heat_ratio
        self.tech_min = tech_min
        self.ramp_up = ramp_up
        self.fixed_cost = fixed_cost
        self.variable_cost = variable_cost
        self.fuel_cost = fuel_cost
        self.tes_size = tes_size
        self.SOC_min = SOC_min
        self.tes_startEnd = tes_startEnd
        self.tes_discharge = tes_discharge
        self.cop_absorption = cop_absorption
        self.el_sale = el_sale
        self.tes_loss = tes_loss

        # Set data in the tree item
        self.setText(2, source)
        self.setData(3, Qt.EditRole, inclinazione)
        self.setData(4, Qt.EditRole, temperature)
        self.setData(5, Qt.EditRole, eta_optical)
        self.setData(6, Qt.EditRole, first_order_coeff)
        self.setData(7, Qt.EditRole, second_order_coeff)
        self.setData(8, Qt.EditRole, p_max)
        self.setData(9, Qt.EditRole, p_min)
        self.setData(10, Qt.EditRole, power_to_heat_ratio)
        self.setData(11, Qt.EditRole, tech_min)
        self.setData(12, Qt.EditRole, ramp_up)
        self.setData(13, Qt.EditRole, fixed_cost)
        self.setData(14, Qt.EditRole, fuel_cost)
        self.setData(15, Qt.EditRole, variable_cost)
        self.setData(16, Qt.EditRole, tes_size)
        self.setData(17, Qt.EditRole, SOC_min)
        self.setData(18, Qt.EditRole, tes_startEnd)
        self.setData(19, Qt.EditRole, tes_discharge)
        self.setData(20, Qt.EditRole, cop_absorption)
        self.setData(21, Qt.EditRole, el_sale)
        self.setData(22, Qt.EditRole, tes_loss)


        self.setFlags(
            Qt.ItemIsEnabled | Qt.ItemIsEditable | Qt.ItemIsSelectable
        )

    def remove_technology(self):
        """
        remove the selected technology
        :return:
        """
        demand = self.parent()
        building = self.parent().parent()
        #building.building_data.drop(self.text(0))
        demand.removeChild(self)