# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PlanningAndSimulationModules
                                 A QGIS plugin
 Planning_And_Simulation_Modules
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-04-16
        git sha              : $Format:%H$
        copyright            : (C) 2019 by softeco
        email                : eglantina.metani@softeco.it   daniele.bonventre@softeco.it
 ***************************************************************************/
"""
from PyQt5.QtCore import Qt, QThread
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QMessageBox, QTabWidget
from qgis.core import QgsProject

# Initialize Qt resources from file resources.py
from .DPMplugin import DPMDialog
# Import the code for the dialog
from .Step0_dialog import Step0Dialog
from .step1_v2 import PlanHeatDPMDockWidget
from .Step2_docwidget import Step2_widget
from .Step3_docwidget import Step3_widget
from .Step4_docwidget import Step4_widget
from .District import District_widget
from .districtSimulation import DistrictSimunation_Widget
import os.path
import os.path
from .LoadInterface import LoadInterface
from .save_utility.SaveDistrict import SaveDistrict
from .save_utility.LoadDistrict import LoadDistrict
from .utility.ProjectFolderBuilder import ProjectFolderBuilder
from planheatclient import PlanHeatClient
from .city.city_planningSimulation import PlanningAndSimulationCity
from . import master_planning_config
from .dhcoptimizerplanheat.ui import ui_utils


from .Test import Test


class PlanningAndSimulationModules:
    """QGIS Plugin Implementation."""

    def __init__(self, iface, master_dlg, work_folder=None):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface

        """
        self.version = 0.36
        # Save reference to the QGIS interface
        self.iface = iface

        self.plugin_dir = os.path.dirname(__file__)

        # Declare instance attributes
        self.dlg = None
        self.master_dlg = master_dlg

        # check and create project folders
        ProjectFolderBuilder.run()

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.first_start_city = None
        self.first_start_district = None
        self.step0_first_start = True
        self.step1_first_start = True
        self.step2_first_start = True
        self.step3_first_start = True
        self.step4_first_start = True
        self.district_first_start = True
        self.distSim_first_start = True
        self.dpmdialog_first_start = True

        #self.city_simulation = None
        self.city_first_start = True

        self.test = None

        self.dpmdialog = None
        self.district = None
        self.distSim = None
        self.planheat_dhc = None
        self.step0 = None
        self.step1 = None
        self.step2 = None
        self.step3 = None
        self.step4 = None

        self.save_routine_initialized = False
        
        self.work_folder_city = os.path.join(work_folder, master_planning_config.CITY_FOLDER)
        os.makedirs(self.work_folder_city, exist_ok=True)
        self.work_folder_district = os.path.join(work_folder, master_planning_config.DISTRICT_FOLDER)
        os.makedirs(self.work_folder_district, exist_ok=True)

        self.save_load = LoadInterface(work_folder=self.work_folder_district)
        self.save_routine = SaveDistrict(folder=self.work_folder_district, version=self.version)
        self.load_routine = LoadDistrict(folder=self.work_folder_district, version=self.version)
        self.save_routine.progressBarUpdate.connect(self.save_load.progress_bar_update)
        self.load_routine.progressBarUpdate.connect(self.save_load.progress_bar_update)

        # self.dhcoptimizerplanheat = DHCOptimizerPlanheat(self.iface)


    def add_action(self):
        return None

    def initGui(self):
        self.first_start = True

    def unload(self):
        pass

    def openDistrict(self):
        if self.district is not None:
            self.district.show()
        if self.dlg is not None:
            self.dlg.hide()

    def openDistrict_Simulation(self):
        if self.distSim is not None:
            self.distSim.show()
        if self.district is not None:
            self.district.hide()

    def openDPM(self):
        if self.dpmdialog is not None:
            self.dpmdialog.show()
        if self.district is not None:
            self.district.hide()

    def openStep0(self):
        if self.step0 is not None:
            self.step0.show()
        if self.dpmdialog is not None:
            self.dpmdialog.hide()

    def openStep1(self):
        if self.step1 is not None:
            self.step1.show()

        if self.dpmdialog is not None:
            self.dpmdialog.hide()

    def openStep2(self):
        if self.step2 is not None:
            self.step2.show()
        if self.dpmdialog is not None:
            self.dpmdialog.hide()

    def openStep3(self):
        if self.step3 is not None:
            self.step3.show()
        if self.dpmdialog is not None:
            self.dpmdialog.hide()

    def openStep4(self):
        if self.step4 is not None:
            self.step4.show()
        if self.dpmdialog is not None:
            self.dpmdialog.hide()
            
    def openCity(self):
        if self.city_first_start:
            self.city = PlanningAndSimulationCity(  self.iface, 
                                                    first_start=self.city_first_start, 
                                                    work_folder=self.work_folder_city)
            self.city.btnCityPlanning.clicked.connect(self.city.openCity_planning)
            self.city.btnCitySimulation.clicked.connect(self.city.openCity_simulation)
            self.city.city_closing_signal.connect(self.onCloseCityPlugin)
            self.city_first_start = False
        self.city.show()
        if self.dlg is not None:
            self.dlg.hide()

    def onCloseCityPlugin(self):
        print("Closing City Planning & Simulation")
        self.master_dlg.show()

    def onCloseDistrictPlugin(self):
        print("Closing District Planning & Simulation")
        self.master_dlg.show()

    def load_all_files(self):
        self.step0.progressBar_load_all_files.setMaximum(6)
        self.step0.progressBar_load_all_files.setMinimum(0)
        self.step0.progressBar_load_all_files.setValue(0)
        self.step0.progressBar_load_all_files.show()
        self.step0.repaint()
        # ------------------------------
        self.step0.load_all_files_from_folder()
        self.step0.progressBar_load_all_files.setValue(1)
        self.step0.repaint()
        # ------------------------------
        self.step0.load_shp_file4()
        self.step0.progressBar_load_all_files.setValue(2)
        self.step0.repaint()
        # ------------------------------
        self.step0.load_shp_file3()
        self.step0.progressBar_load_all_files.setValue(3)
        self.step0.repaint()
        # ------------------------------
        #self.step0.load_csv_file()
        #self.step0.progressBar_load_all_files.setValue(4)
        # ------------------------------
        self.step0.loadScenario()
        self.step0.progressBar_load_all_files.setValue(5)
        self.step0.repaint()
        #-------------------------------
        self.step0.get_layer_streets()
        self.step0.progressBar_load_all_files.setValue(6)
        self.step0.repaint()
        #-------------------------------
        self.step0.progressBar_load_all_files.hide()
        self.step0.phases.setTabEnabled(2, True)
        #QTabWidget.setCurrentIndex(self.step0.phases, 2)


    def run(self):
        """Run method that performs all the real work"""

        file_dir_path = os.path.dirname(os.path.realpath(__file__))
        icon_path = os.path.join(file_dir_path, "icons", "icon.png")

        if self.district_first_start:
            self.district = District_widget()
            self.district.btnPlanning.clicked.connect(self.openDPM)
            self.district.btnSimulation.clicked.connect(self.openDistrict_Simulation)
            self.district.district_closing_signal.connect(self.onCloseDistrictPlugin)
            self.district.setWindowIcon(QIcon(icon_path))
            self.test = Test()
            self.district_first_start = False

        if self.dpmdialog_first_start:
            self.dpmdialog = DPMDialog()
            self.dpmdialog.DPMDialog_closing_signal.connect(self.district.onCloseDistrictPlanningPlugin)
            self.dpmdialog.step0btn.clicked.connect(self.openStep0)
            self.dpmdialog.step1btn.clicked.connect(self.openStep1)
            self.dpmdialog.step2btn.clicked.connect(self.openStep2)
            self.dpmdialog.step3btn.clicked.connect(self.openStep3)
            self.dpmdialog.step4btn.clicked.connect(self.openStep4)
            self.dpmdialog.setWindowIcon(QIcon(icon_path))
            #self.step4.save_to_webserver.clicked.connect(self.dpmdialog.close_dpm_dialog)
            self.dpmdialog_first_start = False

        if self.step0_first_start:
            self.step0 = Step0Dialog(self.iface, work_folder=self.work_folder_district)
            # self.iface.addDockWidget(Qt.RightDockWidgetArea, self.step0)
            self.step0.hide()
            QTabWidget.setCurrentIndex(self.step0.phases, 1)
            self.step0.btnSmm.clicked.connect(self.step0.load_folder)
            self.step0.load.clicked.connect(self.step0.load_all_files_from_folder)
            self.step0.progressBar.hide()
            self.step0.progressBar_load_all_files.hide()
            #self.step0.load_streets.clicked.connect(self.step0.get_layer_streets)
            self.step0.load4.clicked.connect(self.step0.load_shp_file4)
            self.step0.load3.clicked.connect(self.step0.load_shp_file3)
            self.step0.load2.clicked.connect(self.step0.loadScenario)
            self.step0.load1.clicked.connect(self.step0.load_csv_file)
            self.step0.pushButton_load_all_files.clicked.connect(self.load_all_files)
            self.step0.pushButton.clicked.connect(self.step0.add_district_selection)
            self.step0.pushButton_2.clicked.connect(self.step0.override_district_selection)
            self.step0.pushButton_3.clicked.connect(self.step0.reverse_district_selection)
            # self.step0.ok2.clicked.connect(self.step0.closeStep0)
            self.step0.ok.clicked.connect(self.step0.activate_visualization_tabs)
            self.step0.step0_closing_signal.connect(self.openDPM)
            self.step0.pname.hide()
            self.step0.label_6.hide()
            self.step0.areaStudy.hide()
            self.step0.country.hide()
            self.step0.label_7.hide()
            self.step0.label_8.hide()
            self.step0.lineEdit.hide()
            self.step0.lineEdit.setText("changed")
            self.step0.lineEdit_2.hide()
            self.step0.label_11.hide()
            self.step0.label_12.hide()
            self.step0_first_start = False
            self.step0.ok2.clicked.connect(self.onCloseStep0)
            self.step0.setWindowIcon(QIcon(icon_path))
            self.step0.saveLoad.clicked.connect(lambda: self.save_load.show_dialog("STEP0"))
            # self.step0.ok2.clicked.connect(self.dpmdialog.button1_change)
            # self.step0.pushButton_5.clicked.connect(self.dhcoptimizerplanheat.run)

        if self.step1_first_start:
            self.step1 = PlanHeatDPMDockWidget(work_folder=self.work_folder_district)
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.step1)
            self.step1.hide()
            self.step0.step0_all_import_complete.connect(self.step1.set_street_layer)
            self.step1.save.clicked.connect(self.step1.closeStep1)
            self.step1.save.clicked.connect(self.dpmdialog.button2_change)
            # self.step1.generatePoint_DHN.clicked.connect(self.step1.locate_sources_DHN)
            # self.step1.generatePoint_DCN.clicked.connect(self.step1.locate_sources_DCN)
            self.step1.step1_closing_signal.connect(self.openDPM)
            self.step1.checkBox.stateChanged.connect(self.step1.district_solution_checked)
            self.step1.checkBox_3.stateChanged.connect(\
                lambda : self.step1.DHN_checked(self.step1.checkBox_3.isChecked(), self.step1.checkBox_4.isChecked()))
            self.step1.checkBox_4.stateChanged.connect(\
                lambda : self.step1.DCN_checked(self.step1.checkBox_3.isChecked(), self.step1.checkBox_4.isChecked()))
            self.step1.dialog_source = self.step0.dialog_source
            self.step1.dialog_source.okButton.clicked.connect(self.step1.recived_sources_selected)
            self.step1.step0_table = self.step0.sources_available
            self.step1.checkBox_buildingSolution.stateChanged.connect(\
                lambda : self.step1.Building_checked(self.step1.checkBox_buildingSolution.isChecked()))
            self.step0.buildings_shp_loaded_step1signal.connect(self.step1.load_dpm_layer)
            self.step1.saveLoad.clicked.connect(lambda: self.save_load.show_dialog("STEP1"))
            self.step1_first_start = False

        if self.step2_first_start:
            self.step2 = Step2_widget(work_folder=self.work_folder_district, iface=self.iface)
            self.step2.hide()
            self.step0.send_data_to_step2.connect(self.step2.get_step0_data)
            self.step2.okbtn.clicked.connect(self.step2.closeStep2)
            self.step2.okbtn.clicked.connect(self.dpmdialog.button3_change)
            self.step2.step2_closing_signal.connect(self.openDPM)
            self.step2.calculateKpi.clicked.connect(self.step2.KPIs_baselineScenario)
            self.step1.send_widget.connect(self.step2.receive_widget)
            self.step0.buildings_shp_loaded_step1signal.connect(self.step2.receive_baseline_scenario)
            self.step2.setWindowIcon(QIcon(icon_path))
            self.step2.step0 = self.step0
            self.step2.step1 = self.step1
            self.step2_first_start = False
            self.step1.checkBox.stateChanged.connect(
                lambda: self.step2.update_mode_networks(self.step1.checkBox.isChecked()))
            self.step1.checkBox_buildingSolution.stateChanged.connect(
                lambda: self.step2.update_mode_single_buildings(self.step1.checkBox_buildingSolution.isChecked()))

        if self.step3_first_start:
            self.step3 = Step3_widget()
            self.step3.hide()
            self.step3.oktargets.clicked.connect(self.step3.closeStep3)
            self.step3.oktargets.clicked.connect(self.onCloseStep3)
            self.step3.oktargets.clicked.connect(self.dpmdialog.button4_change)
            self.step3.step3_closing_signal.connect(self.openDPM)
            self.step3.step0_sources_availability_tab = self.step0.sources_available
            self.step0.send_tab_sources.connect(self.step3.recive_tab_sources)
            self.step2.okbtn.clicked.connect(self.step3.vis_tab3)
            self.step2.okbtn.clicked.connect(self.step3.load_table)
            self.step2.setWindowIcon(QIcon(icon_path))
            self.step3.step2_energy_tab = self.step2.tableWidget_5
            self.step3.step2_environmental_tab = self.step2.tableWidget_2
            self.step3.step2_economic_tab = self.step2.tableWidget_3
            self.step3.step2_social_tab = self.step2.tableWidget_4
            self.step3.saveLoad.clicked.connect(lambda: self.save_load.show_dialog("STEP3"))
            self.step2.send_KPIs_to_future.connect(self.step3.receive_KPIs)
            self.step3_first_start = False

        if self.step4_first_start:
            self.step4 = Step4_widget(work_folder=self.work_folder_district)
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.step4)
            self.step4.hide()
            self.step4.save_to_webserver.clicked.connect(self.step4.closeStep4)
            self.step4.save_to_webserver.clicked.connect(self.district.button_change)
            self.step4.step4_closing_signal.connect(self.openDistrict)
            self.step4.futureDistrictSolution.stateChanged.connect(self.step4.district_solution_checked)
            self.step4.futureDHN.stateChanged.connect(\
                lambda : self.step4.DHN_checked(self.step4.futureDHN.isChecked(), self.step4.futureDCN.isChecked()))
            self.step4.futureDCN.stateChanged.connect(\
                lambda : self.step4.DCN_checked(self.step4.futureDHN.isChecked(), self.step4.futureDCN.isChecked()))
            self.step4.futureBuildingSolution.stateChanged.connect(\
                lambda : self.step4.Building_checked(self.step4.futureBuildingSolution.isChecked()))
            self.step1.send_networks.connect(self.step4.receive_networks)
            self.step0.buildings_shp_loaded_step4signal.connect(self.step4.receive_future_scenario)
            self.step0.buildings_shp_loaded_step1signal.connect(self.step4.receive_baseline_scenario)
            self.step0.buildings_shp_loaded_step4signal.connect(self.step4.load_dpm_layer)
            self.step0.step0_all_import_complete.connect(self.step4.get_data_transfer)
            self.step0.step0_all_import_complete.connect(self.step1.get_data_transfer)
            self.step4.step0_source_availability_table = self.step0.sources_available
            self.step4.saveLoad.clicked.connect(lambda: self.save_load.show_dialog("STEP4"))
            self.step4_first_start = False

        if self.distSim_first_start:
            self.distSim = DistrictSimunation_Widget()
            self.distSim.baseline_tech_tab = self.step1.dmmTree
            self.distSim.baseline_network_tech_tab = self.step1.dmmTreeNetwork
            self.distSim.ok.clicked.connect(self.openDistrict)
            self.distSim.ok.clicked.connect(self.distSim.closedistrictSim)
            self.distSim.btnExport.clicked.connect(lambda : self.distSim.export_table(work_folder=self.work_folder_district))
            self.distSim.districtSimulation_closing_signal.connect(self.district.onCloseDistrictSimulationPlugin)
            self.step2.send_KPIs_to_future.connect(self.distSim.receive_KPIs)
            self.distSim.setWindowIcon(QIcon(icon_path))
            self.distSim.step4 = self.step4
            self.distSim.step0 = self.step0
            self.distSim.target_input_table_en = self.step3.tableVisKpiEn
            self.distSim.target_input_table_env = self.step3.tableVisKpiEnv
            self.distSim.target_input_table_eco = self.step3.tableVisKpiEco
            self.distSim.target_input_table_so = self.step3.tableVisKpiSo
            self.step3.oktargets.clicked.connect(self.distSim.target_update)
            self.step3.criteria_transfer.set_target_tables(self.distSim.tableWidget_10, self.distSim.tableWidget_5,
                                                           self.distSim.tableWidget_6, self.distSim.tableWidget_7)
           
            self.distSim_first_start = False

        if self.first_start == True:
            if self.first_start_district:
                self.openDistrict()
            elif self.first_start_city:
                self.openCity()
            self.first_start = False

        if not self.save_routine_initialized:
            self.save_routine.work_folder = self.work_folder_district
            self.save_routine.save_interface = self.save_load
            self.save_routine.dpmdialog = self.dpmdialog
            self.save_routine.district = self.district
            self.save_routine.step0 = self.step0
            self.save_routine.step1 = self.step1
            self.save_routine.step2 = self.step2
            self.save_routine.step3 = self.step3
            self.save_routine.step4 = self.step4
            self.save_routine.simulation = self.distSim
            self.save_routine.initialize()

            self.load_routine.save_interface = self.save_load
            self.load_routine.dpmdialog = self.dpmdialog
            self.load_routine.district = self.district
            self.load_routine.step0 = self.step0
            self.load_routine.step1 = self.step1
            self.load_routine.step2 = self.step2
            self.load_routine.step3 = self.step3
            self.load_routine.step4 = self.step4
            self.load_routine.simulation = self.distSim
            self.load_routine.initialize()

            # self.save_routine.saved_done.connect(self.load_routine.saved_done)
            # self.step0.file_removed.connect(self.load_routine.saved_done)
            self.save_routine_initialized = True

        self.init_test()
        # result = self.dlg.exec_()

        # if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            # pass

        # !!
        # HACK SECTION (be carefull !)
        # self.step1.show()
        # self.step2.show()
        # self.step3.show()
        # self.step4.show()
        # self.distSim.show()
        # self.distSim.grafico_for_district()
        # self.distSim.grafico_for_individualSolution()
        # self.step2.show()

    def onCloseStep0(self):
        print("Closing step 0")
        if self.step1.data_transfer is None:
            msg = QMessageBox(self.step0)    
            msg.setIcon(QMessageBox.Information)
            msg.setStandardButtons(QMessageBox.Ok)
            msg.setWindowTitle("Uncompleted step")
            msg.setText("You haven't downloaded the streets. Please do it before going to step 1")
            msg.exec_()
        else:
            self.step0.closeStep0()
            self.hide_layers_before_step1()
            self.dpmdialog.button1_change()

    def onCloseStep3(self):
        self.hide_layers_before_step4()

    def hide_layers_before_step1(self):
        ui_utils.hide_group("Shapefiles from SMM")
        ui_utils.hide_group("Raster layers from SMM")

    def hide_layers_before_step4(self):
        root = QgsProject.instance().layerTreeRoot()
        for child in root.children():
            if child.name().startswith("DHN (baseline)") or child.name().startswith("DCN (baseline)"):
                child.setItemVisibilityChecked(False)
                child.setExpanded(False)

    def init_test(self):
        self.test.active = False  # put this to False (default is False) to deactivate tests, do not comment init_test
        self.test.tech_tab = self.step1.dmmTree
        self.test.tech_future_buildings_widget_tab = self.step4.dmmTree_future
        self.test.step5 = self.distSim
        self.test.network_tree_widget_baseline = self.step1.dmmTreeNetwork
        self.test.network_tree_widget_future = self.step4.futureDmmTreeNetwork

        minimal_advance = False  # just go to step 1
        automatic_advance = False  # just go to step 2 and set technologies (require also test.active == True)
        complete_advance = False  # directly jump go to step 4. Requires test.active and baseline KPIs mock
        if minimal_advance:
            self.step0.ok2.clicked.connect(self.test.run_test_step1)

            self.district.btnPlanning.clicked.emit()
            self.dpmdialog.step0btn.clicked.emit()
            self.step0.pushButton_load_all_files.clicked.emit()
            self.step0.btnSourcesAvailability.clicked.emit()
            self.step0.ok2.clicked.emit()
            self.dpmdialog.step1btn.clicked.emit()
        if automatic_advance and self.test.active:
            self.step1.save.clicked.connect(self.test.fill_baseline_network_widget)

            self.step1.checkBox.setCheckState(Qt.Checked)
            self.step1.checkBox_buildingSolution.setCheckState(Qt.Checked)
            self.step1.checkBox_3.setCheckState(Qt.Checked)
            self.step1.checkBox_4.setCheckState(Qt.Checked)

            self.step4.save_to_webserver.clicked.connect(self.test.run_end_step4_add_tech_network)

            self.step1.save.clicked.emit()
            self.dpmdialog.step2btn.clicked.emit()
            if complete_advance:
                self.step3.oktargets.clicked.connect(self.test.run_end_step3)
                self.step4.save_to_webserver.clicked.connect(self.test.run_end_step4)

                self.step2.okbtn.clicked.emit()
                self.dpmdialog.step3btn.clicked.emit()
                self.step3.oktargets.clicked.emit()
                self.dpmdialog.step4btn.clicked.emit()
                self.step4.save_to_webserver.clicked.emit()
                self.district.btnSimulation.clicked.emit()

