# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PlanHeatDPM
                                 A QGIS plugin
 District Planninng Module
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-09-04
        git sha              : $Format:%H$
        copyright            : (C) 2018 by andbs
        email                : andbs@rina.org
 ***************************************************************************/
"""
import os.path

# Import qgis main libraries
from qgis.core import *
from qgis.gui import *
from qgis.utils import *

# Import pyqt
from PyQt5.QtCore import *


class DPMLayer(QgsVectorLayer):
    """Load the dmm layer into a memory layer"""
    def __init__(self, path: str):
        """
        Load the output of the DMM layer into memory as a clone so that
        modifications made to the clone will not be made to the original
        :param path:
        """
        source = QgsVectorLayer(
            path,
            'DMM Source',
            'ogr'
        )
        uri = 'Polygon?crs=' + source.crs().authid() + '&index=yes'
        QgsVectorLayer.__init__(self, uri, 'DMM', 'memory')

        if source and source.isValid():
            dmm_dp = self.dataProvider()
            with edit(self):
                dmm_dp.addAttributes(source.fields().toList())
                dmm_dp.addAttributes(
                    [
                        QgsField('Heating_c', QVariant.Double),
                        QgsField('Heating_e', QVariant.Double),
                        QgsField('Cooling_c', QVariant.Double),
                        QgsField('Cooling_e', QVariant.Double),
                        QgsField('DHW_c', QVariant.Double),
                        QgsField('DHW_e', QVariant.Double),
                        QgsField('DHWH_c', QVariant.Double),
                        QgsField('DHWH_e', QVariant.Double)
                    ]
                )
                self.updateFields()
                features = [f for f in source.getFeatures()]
                dmm_dp.addFeatures(features)
                QgsProject.instance().addMapLayer(self)
        else:
            raise TypeError("Invalid Layer")

